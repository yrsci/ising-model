#!/usr/bin/python3

"""

This script analyses properties of the Ising model by converting .pbm files generated by the Ising model back into arrays and running these through functions to calculate properties.

1. No magnetic field:
Magnetisation M and energy E per microstate (i.e. per lattice) are calculated using special functions in the lattice_functions module. The thermal averages <M>, <M**2>, <E> and <E**2> are found from the last 3/5 of these (i.e. once equilibrium is reached), and the variance is calculated. The specific heat capacity and susceptibility are then derived from these values using the fluctuation-dissipation theorem. 

2. A range of field values:
This part of the script allows hysteresis to be explored by calculating <M> across a full cycle of h values for three temperatures: T < T_c, T ~ T_c and T > T_c.

All data generated are added to a pandas dataframe, which is pickled and exported to the same directory.

"""

import pandas as pd
import matplotlib.pyplot as plt
import lattice_functions
import numpy as np


###
### 1. Set values
###

# Record input and parse for: directory name, h_list, T_list
input_vals = input()
full_dir, dummy, h_list, T_list = lattice_functions.parse_input(input_vals)

# Set number of images generated per run
it_range = 500

###
### 2. Run analysis
###

# Choice between arrays generated for a fixed value of h or multiple vals of h

if len(h_list) == 1:
    
    h = h_list[0]
    
    # Initialise a pandas dataframe to take thermal averages, start w/ column of T values
    col = ["Temperature"]
    data = [T_list]
    zipped = list(zip(col,data))
    therm_data_dict = dict(zipped)
    thermal_averages = pd.DataFrame(therm_data_dict)
    
    # Initialise a pandas dataframe to take time-dep data, start w/ column of "time" values
    time_col = ["Time"]
    times = np.array([np.arange(0,it_range)])*5
    zipped = list(zip(time_col,times))
    time_data_dict = dict(zipped)
    time_data = pd.DataFrame(time_data_dict,index=range(0,it_range))
    
    # Initialise lists to take the average values 
    av_mag_list = []
    av_mag_sq_list = []
    av_en_list = []
    av_en_sq_list = []
    
    # Iterate through the temperature list
    for temp in T_list:
        print("h = ",h," T = ",temp)        
        mag = []
        energy = []
       
        # Iterate over all the .pbm files generated at this temperature
        for j in range(0,it_range):
            # Convert the .pbm back into a numpy array
            filename = "nofield_T"+str(temp)+"_"+str(j)+".pbm"
            lattice = lattice_functions.read_pbm(filename,full_dir)
            # Calculate M, M**2 and E, E**2 for the array and add to lists
            mag.append(lattice_functions.magnetisation(lattice))
            energy.append(lattice_functions.energy(lattice,h,magtype="ferro"))
        
        # Split the lists of tuples into separate lists
        mag_list = [ i for i,j in mag ]
        mag_sq_list = [ j for i,j in mag ]
        en_list = [ i for i,j in energy ]
        en_sq_list = [ j for i,j in energy ]
        
        # Broadcast the temperature value to a new column in the dataframe
        time_data["Temperature "+str(temp)] = pd.Series(temp, index=time_data.index)           
        # Add the magnetisation values to new column in the dataframe
        time_data["Magnetisation at T="+str(temp)] = pd.Series(mag_list, index=time_data.index)
        # Add the energy values to new column in the dataframe
        time_data["Energy at T="+str(temp)] = pd.Series(en_list, index=time_data.index)

        # Calculate <M>, <M**2>, <E> and <E**2> from the last 150 lattices
        tot_mag = 0
        tot_mag_sq = 0
        tot_en = 0
        tot_en_sq = 0
        
        for x in range(it_range-300,it_range):
            tot_mag += mag_list[x]
            tot_mag_sq += mag_sq_list[x]
            tot_en += en_list[x]
            tot_en_sq += en_sq_list[x]
        
        av_mag = tot_mag / 300 
        av_mag_sq = tot_mag_sq / 300
        av_en = tot_en / 300
        av_en_sq = tot_en_sq / 300
        
        av_mag_list.append(av_mag)
        av_mag_sq_list.append(av_mag_sq)
        av_en_list.append(av_en)
        av_en_sq_list.append(av_en_sq)
        
    # Convert the completed lists to arrays
    av_mag_array = np.array(av_mag_list)
    av_mag_sq_array = np.array(av_mag_sq_list)
    av_en_array = np.array(av_en_list)
    av_en_sq_array = np.array(av_en_sq_list)
    T_array = np.array(T_list)
    
    # Calculate the variance in M and E using these arrays
    M_variance = av_mag_sq_array - ( av_mag_array**2 )
    E_variance = av_en_sq_array - ( av_en_array**2 )
    
    #Calculate the heat capacity and susceptibility
    heat_cap = E_variance / ( T_array**2 )
    susc = M_variance / ( T_array**2 )
    
    # Add <M> and variance in <M> to the dataframe
    thermal_averages["\<M\> per site"] = pd.Series(av_mag_list, index=thermal_averages.index)
    thermal_averages["Variance in \<M\>"] = pd.Series(M_variance,index=thermal_averages.index)    
    # Add <E> and variance in <E> to the dataframe
    thermal_averages["\<E\> per site"] = pd.Series(av_en_list, index=thermal_averages.index)
    thermal_averages["Variance in \<E\>"] = pd.Series(E_variance,index=thermal_averages.index)
    # Add heat capacity and susceptibility to the dataframe
    thermal_averages["Heat Capacity"] = pd.Series(heat_cap,index=thermal_averages.index)
    thermal_averages["Susceptibility"] = pd.Series(susc,index=thermal_averages.index)

    # Export the dataframes to pickle files
    thermal_averages.to_pickle("./"+full_dir+"/thermal_averages_nofield.pkl")
    time_data.to_pickle("./"+full_dir+"/time_data_nofield.pkl")


# if more than one h value is given:

else :
    
    # Initialise a pandas dataframe with the h values as first column
    col = ["Magnetic field"]
    data = [h_list]
    zipped = list(zip(col,data))
    data_dict = dict(zipped)
    df = pd.DataFrame(data_dict)
    
    # Iterate through the temperature list
    for temp in T_list:       
        average_mag_list = []
    
        # Iterate over the magnetic field vals, at each temperature
        for i in range(0,len(h_list)):
            h = h_list[i]
            print("h = ",h," T = ",temp)        
            mag = [] 

            # Iterate over the last 25 .pbm files generated by ising-model.py
            for j in range(0,it_range):
                # Convert the .pbm back into a numpy array
                #filename = "./"+full_dir+"/hyst_T"+str(temp)+"_h"+str(h)+"__"+str(i)+"_"+str(j)+".pbm"
                filename = "hysteresis"+str(temp)+"K_h"+str(h)+"__"+str(i)+"_"+str(j)+".pbm"
                lattice = lattice_functions.read_pbm(filename,full_dir)
                # Calculate the net magnetisation of the array & add to running total
                mag.append(lattice_functions.magnetisation(lattice)[1])
                    
            # Calculate the average magnetisation of the last 150 lattices
            tot_mag = 0
            for x in range(it_range-250,it_range):
                tot_mag += mag[x]
            av_mag = tot_mag / 250 
            average_mag_list.append(av_mag)

        # Add 2 cols to df: 1. temp, 2. average magnetisation values
        df["Temperature = "+str(temp)] = pd.Series(temp, index=df.index)
        df["Magnetisation per site at T = "+str(temp)] = pd.Series(average_mag_list, index=df.index)


    # Export the dataframe to a pickle file
    df.to_pickle("./"+full_dir+"/hyst_magnetisation.pkl")

    T_array = np.array(T_list)

    ###
    ### 3. Plotting (h!=0)
    ###

    # Plot magnetisation vs field
    fig1 = plt.figure()
    plt.title("Transition from Ferromagnetism to Paramagnetism")
    
    # Plot the datapoints & errorbars
    belowTc,= plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[0])],".",color="#d05020")    
    #atTc,= plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[1])],".",color="#107060")
    #aboveTc,= plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[2])],".",color="#aa2020")
    
    # Plot lines through the data
    #plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[0])],color="#f08050",linewidth=1.)
    #plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[1])],color="#40bba0",linewidth=1.)    
    #plt.plot(df["Magnetic field"],df["Magnetisation per site at T = "+str(T_array[2])],color="#ee6060",linewidth=1.)
   
    # Axis labels and legend
    plt.xlabel("Magnetic Field H")
    plt.ylabel("Net Magnetisation (per site)")
    plt.grid(b=True, which="both")
#    plt.legend([belowTc,atTc,aboveTc],["$T<T_c$","$T \\sim T_c$","$T>T_c$"])
    
    plt.savefig("./"+full_dir+"/hysteresis.png")    

