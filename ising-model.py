#!/usr/bin/python3

"""

This script takes values of temperature and magnetic field inputted via ising-model.sh and, using bespoke functions in the lattice_functions module, simulates a simple binary spin system using the Ising model. The script uses matplotlib.pyplot.imshow() to allow live monitoring of the updating lattice.

The lattice is a numpy array, which is saved as a .pbm file (with iteratively-generated filename) upon each iteration of the update loop. The .pbm files are then additionally collated into an animated .gif for qualitative review. Analysis of the properties of the system is dealt with in lattice_analysis.py, which imports and analyses the .pbm files generated by this script.

"""


import numpy as np
import matplotlib.pyplot as plt
import lattice_functions


###
### 1. Set values, generate initial lattice
###

# Take input from the bash script & store in 
from_bash = input("Reading input from Bash script...\n")

directory,n,h_list,T_list = lattice_functions.parse_input(from_bash)

magtype = "ferro"

if magtype == "ferro" :
    # Start with uniform lattice of ones (i.e. start at '0K' & increase T)
    lattice = np.ones((n,n), dtype=np.int)
elif magtype == "antiferro" :
    lattice = lattice_functions.antiferro_lattice_gen(n)

# Initialise live monitoring of updating lattice 
plt.ion()
plt.imshow(lattice)
plt.pause(0.1)

print("Lattice Dimensions: ", lattice.shape)


###
### 2. Run the Ising Model:
###

# Iterate through list of temperatures
for temp in T_list:
        
    # At each temp, iterate through list of magnetic field vals.
    for i in range(0,len(h_list)):        
        h = h_list[i]
            
        print(" T = "+str(temp)+", h = "+str(h))
                    
        # Initialise empty list to take filenames for .gif generation
        filenames = []
            
        # Iterate through lattice & update spins according to p_flip
        for j in range(0,500):
                
            # Update lattice by calling specific function
            lattice_functions.update_lattice(lattice,temp,h,magtype)
                
            # Live monitoring of updating lattice every 5000 steps            
            if j % 5000 == 0:
                plt.clf()
                plt.imshow(lattice)
                plt.title("h = "+str(h)+", T = "+str(temp)+", "+str(i)+"."+str(j))
                plt.pause(0.05)
        
            if h == 0 :
                # Save a .pbm image file of the updated lattice
                filename = "nofield_T"+str(temp)+"_"+str(j)+".pbm"
                lattice_functions.pbm(lattice,filename,directory)
                if j % 10 == 0:
                    filenames.append(filename)
                    
            else :
                # Save a .pbm image file of the updated lattice  
                filename = "hysteresis"+str(temp)+"K_h"+str(h)+"__"+str(i)+"_"+str(j)+".pbm"
                lattice_functions.pbm(lattice, filename, directory)
                if j % 10 == 0:
                    filenames.append(filename)

        if h == 0 :
            # Set a descriptive filename for the .gif
            lattice_functions.gif_gen(filenames,directory,"nofield_isingmodel_T"+str(temp))
            
        else :
            # Set a descriptive filename for the .gif
            lattice_functions.gif_gen(filenames,directory,"hyst_isingmodel_T"+str(temp)+"_h"+str(h)+"_"+str(i))
