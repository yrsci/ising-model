#!/usr/bin/python3

"""
This script facilitates plotting of the dataframes generated by lattice_analysis.py.

"""


import pandas as pd
import matplotlib.pyplot as plt
import lattice_functions
import numpy as np


directories = {
    "8x8" : "./nofield_8x8_910957/",
    "16x16" : "./nofield_16x16_910568/",
    "32x32" : "./nofield_32x32_907752/",
    "64x64" : "./nofield_64x64_911342/",
    "128x128" : "./nofield_128x128_917681/",
    "test" : "./test_252726/",
    "antiferr" : "./antiferro_128x128_longer_175207/"
    }

lattice_choice = input("Which lattice would you like to plot from?\n- 8x8\n- 16x16\n- 32x32\n- 64x64\n- 128x128\n- comparison\n")

all_df_therm = { "therm_av_"+i : pd.read_pickle(directories[i]+"thermal_averages_nofield.pkl") for i in directories }
all_df_time = { "time_data_"+i : pd.read_pickle(directories[i]+"time_data_nofield.pkl") for i in directories }



    
if lattice_choice != "comparison" :
    thermal_averages = pd.read_pickle(directories[lattice_choice]+"thermal_averages_nofield.pkl")
    time_data = pd.read_pickle(directories[lattice_choice]+"time_data_nofield.pkl")
    
    plot_choice = input("Which properties would you like to plot? (Type a number)\n1 Spontaneous magnetisation vs temperature \n2 Magnetisation vs time \n3 Energy vs time \n4 <M>**2 vs temperature\n5 <E>**2 vs temperature \n6 Heat capacity vs temperature \n7 Magnetic susceptibility vs temperature \n8 All \n")

    if plot_choice == "8" or plot_choice == "1":
        # Plot of <M> vs temperature
        fig1 = plt.figure()
        plt.title("Spontaneous Magnetisation")
        plt.plot(thermal_averages["Temperature"],thermal_averages["\<M\> per site"],color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["\<M\> per site"],"o",markersize=3,color="#000000")
        Tc,=plt.plot([2.27,2.27],[-0.55,1.2],color="#ee1010",linestyle="--",linewidth=1.)
        plt.plot([1.0,3.0],[0,0],color="#000000",linewidth=1.)
        
        fit = (np.ones(130) *2.27) - thermal_averages["Temperature"][70:200]
        fitplt,=plt.plot(thermal_averages["Temperature"][70:200],fit**(0.085))
        
        plt.xlim(1.0,3.0)
        plt.ylim(-0.55,1.15)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Net Magnetisation (per site)")
        plt.legend([Tc,fitplt],["$T \sim T_c$","$ \\beta = 0.085$"])
        plt.savefig(directories[lattice_choice]+"magvstemp.png")

            
    if plot_choice == "8" or plot_choice == "2":
        # Plot of M vs MC timesteps
        fig2 = plt.figure()
        plt.title("Magnetisation vs. Time")
        lessthan_Tc,= plt.plot(time_data["Time"],time_data["Magnetisation at T=1.0"],".")
        approx_Tc,= plt.plot(time_data["Time"],time_data["Magnetisation at T=2.27"],".")
        greaterthan_Tc,= plt.plot(time_data["Time"],time_data["Magnetisation at T=2.99"],".")
        plt.legend([lessthan_Tc,approx_Tc,greaterthan_Tc],["$T < T_c$","$T \sim T_c$","$T > T_c$"],loc=[0.049,0.7])
        plt.grid(which="major")
        plt.xlabel("Monte Carlo timestep")
        plt.ylabel("Net Magnetisation (per site)")
        plt.savefig(directories[lattice_choice]+"magvstime.png")
            
    if plot_choice == "8" or plot_choice == "3":
        # Plot of E vs MC timesteps
        fig2 = plt.figure()
        plt.title("Energy vs. Time")
        lessthan_Tc,= plt.plot(time_data["Time"],time_data["Energy at T=1.0"],".")
        approx_Tc,= plt.plot(time_data["Time"],time_data["Energy at T=2.27"],".")
        greaterthan_Tc,= plt.plot(time_data["Time"],time_data["Energy at T=2.99"],".")
        plt.legend([lessthan_Tc,approx_Tc,greaterthan_Tc],["$T < T_c$","$T \sim T_c$","$T > T_c$"],loc=[0.049,0.6])
        plt.grid(which="major")
        plt.xlabel("Monte Carlo timestep")
        plt.ylabel("Net Energy (per site)")
        plt.savefig(directories[lattice_choice]+"energyvstime.png")


    if plot_choice == "8" or plot_choice == "4":
        # Plot of variance in <M> vs temperature
        fig3 = plt.figure()
        plt.title("Variance in <M> with temperature")
        plt.plot(thermal_averages["Temperature"],thermal_averages["Variance in \<M\>"],color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["Variance in \<M\>"],"o",markersize=3,color="#000000")
        plt.xlim(1.0,3.0)
        plt.ylim(-0.001,0.15)
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Variance in <M> (per site)")
        #plt.yticks(np.linspace(0,0.015,6),"")
        plt.legend([Tc],["$T \sim T_c$"])
        plt.savefig(directories[lattice_choice]+"M_variance.png")

    if plot_choice == "8" or plot_choice == "5":
        # Plot of variance in <E> vs temperature
        fig4 = plt.figure()
        plt.title("Variance in <U> with temperature")
        plt.plot(thermal_averages["Temperature"],thermal_averages["Variance in \<E\>"],color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["Variance in \<E\>"],"o",markersize=3,color="#000000")
        plt.xlim(1.0,3.0)
        plt.ylim(-0.0005,0.015)
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Variance in <U> (per site)")
        #plt.yticks(np.linspace(0,0.0007,6),"")
        plt.legend([Tc],["$T \sim T_c$"])
        plt.savefig(directories[lattice_choice]+"E_variance.png")
        

    if plot_choice == "8" or plot_choice == "6":
        # Plot of heat capacity vs temperature
        fig5 = plt.figure()
        plt.title("Specific Heat vs. Temperature")
        plt.plot(thermal_averages["Temperature"],thermal_averages["Heat Capacity"],color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["Heat Capacity"],"o",markersize=3,color="#000000")
        plt.xlim(1.0,3.0)
        plt.ylim(-0.00005,0.0025)
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Specific Heat")
        plt.yticks(np.linspace(0,0.0025,6),"")
        plt.legend([Tc],["$T \sim T_c$"])
        plt.savefig(directories[lattice_choice]+"heat_cap.png")
    
    
    
    if plot_choice == "8" or plot_choice == "7":
        # Plot of susceptibility vs temperature
        fig6 = plt.figure()
        plt.title("Magnetic Susceptibility vs. Temperature")
        plt.plot(thermal_averages["Temperature"],thermal_averages["Susceptibility"],color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["Susceptibility"],"o",markersize=3,color="#000000")
        #plt.ylim(-0.0001,0.003)
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Magnetic Susceptibility")
        #plt.yticks(np.linspace(0,0.003,6),"")
        #plt.legend([Tc],["$T \sim T_c$"])
        plt.savefig(directories[lattice_choice]+"suscept.png")
        
    if plot_choice == "8" or plot_choice == "7":
        # Plot of susceptibility vs temperature
        fig6 = plt.figure()
        plt.title("Magnetic Susceptibility vs. Temperature")
        plt.plot(thermal_averages["Temperature"],thermal_averages["Susceptibility"]**(-1),color="#000000",linewidth=1.)
        plt.plot(thermal_averages["Temperature"],thermal_averages["Susceptibility"]**(-1),"o",markersize=3,color="#000000")
        #plt.xlim(0,2.27)
        #plt.ylim(-0.0001,0.003)
        #Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Inverse Magnetic Susceptibility")
        #plt.yticks(np.linspace(0,0.003,6),"")
        #plt.legend([Tc],["$T \sim T_c$"])
        plt.savefig(directories[lattice_choice]+"suscept.png")

elif lattice_choice == "comparison" :
    
    plot_choice = input("Which comparison would you like to plot? (Type a number) \n1 Specific Heat (8x8 vs 128x128) \n2 M vs time at T=1.5 (8x8 vs 128x128) \n3 M vs time at T=2.26 (8x8 vs 128x128) \n4 <M> and <E> per site vs temperature (128x128) \n5 Susc for ferro vs. antiferro \n6 All \n")
    
    if plot_choice == "6" or plot_choice == "1":
        fig9 = plt.figure()
        plt.subplot(2,1,1)
        plt.plot(all_df_therm["therm_av_8x8"]["Temperature"],all_df_therm["therm_av_8x8"]["Heat Capacity"],color="#000000")
        plt.plot(all_df_therm["therm_av_8x8"]["Temperature"],all_df_therm["therm_av_8x8"]["Heat Capacity"],"o",markersize=3,color="#000000")
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.title("Specific heat as calculated from 8x8 array (top) vs. 128x128 array (below)")
        plt.grid(which="major")
        plt.legend([Tc],["$T_c$ = 2.27"])
        plt.ylim(0,0.027)
        plt.xticks(np.linspace(1.,5.,17),"")
        plt.yticks(np.linspace(0,0.027,5),"")  
        plt.ylabel("Specific Heat")


        
        plt.subplot(2,1,2)
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["Heat Capacity"],color="#000000")
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["Heat Capacity"],"o",markersize=3,color="#000000")
        Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        yticks=([])
        plt.ylim(0,0.000150)
        plt.xticks(np.linspace(1.,5.,17),[1.0,"",1.5,"",2.0,"",2.5,"",3.0,"",3.5,"",4.0,"",4.5,"",5.0])
        plt.yticks(np.linspace(0,0.000150,5),"")
        plt.xlabel("Temperature")
        plt.ylabel("Specific Heat")
        
        plt.subplots_adjust(hspace=0)
        plt.savefig("./final_plots/spec_heat_comp.png")
    
    if plot_choice == "6" or plot_choice == "2":
        fig12 = plt.figure()
        plt.subplot(2,1,1)
        plt.plot(all_df_time["time_data_8x8"]["Time"],all_df_time["time_data_8x8"]["Magnetisation at T=2.26"],color="#000000",linewidth=1.)
        plt.plot(all_df_time["time_data_8x8"]["Time"],all_df_time["time_data_8x8"]["Magnetisation at T=2.26"],"o",markersize=3,color="#000000")
        plt.title("Magnetisation at T=2.26: 8x8 lattice (top) vs. 128x128 lattice (bottom)")
        plt.grid(which="major")
        plt.ylim(-1.2,1.2)
        plt.ylabel("Magnetisation per site")
        
        plt.subplot(2,1,2)
        plt.plot(all_df_time["time_data_128x128"]["Time"],all_df_time["time_data_128x128"]["Magnetisation at T=2.26"],color="#000000",linewidth=1.)
        plt.plot(all_df_time["time_data_128x128"]["Time"],all_df_time["time_data_128x128"]["Magnetisation at T=2.26"],"o",markersize=3,color="#000000")
        plt.grid(which="major")
        plt.ylim(-1.2,1.2)
        plt.ylabel("Magnetisation per site")
        plt.xlabel("Monte Carlo timestep")
        
        plt.subplots_adjust(hspace=0)
        plt.savefig("./final_plots/magvstime_T2.26_comp.png")
        
    
    if plot_choice == "6" or plot_choice == "3":
        fig11 = plt.figure()
        plt.subplot(2,1,1)
        plt.plot(all_df_time["time_data_8x8"]["Time"],all_df_time["time_data_8x8"]["Magnetisation at T=1.5"],color="#000000",linewidth=1.)
        plt.plot(all_df_time["time_data_8x8"]["Time"],all_df_time["time_data_8x8"]["Magnetisation at T=1.5"],"o",markersize=3,color="#000000")
        plt.title("Magnetisation at T=1.5: 8x8 lattice (top) vs. 128x128 lattice (bottom)")
        plt.grid(which="major")
        plt.ylim(0.865,1.025)
        plt.ylabel("Magnetisation per site")
        
        plt.subplot(2,1,2)
        plt.plot(all_df_time["time_data_128x128"]["Time"],all_df_time["time_data_128x128"]["Magnetisation at T=1.5"],color="#000000",linewidth=1.)
        plt.plot(all_df_time["time_data_128x128"]["Time"],all_df_time["time_data_128x128"]["Magnetisation at T=1.5"],"o",markersize=3,color="#000000")
        plt.grid(which="major")
        plt.ylim(0.865,1.025)
        plt.ylabel("Magnetisation per site")
        plt.xlabel("Monte Carlo timestep")
        
        plt.subplots_adjust(hspace=0)
        plt.savefig("./final_plots/magvstime_T1.5_comp.png")
    
    if plot_choice == "6" or plot_choice == "4":
        fig10 = plt.figure()
        plt.subplot(2,1,1)
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["\<M\> per site"],color="#000000")
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["\<M\> per site"],"o",markersize=3,color="#000000")
        Tc,=plt.plot([2.27,2.27],[-0.35,1.2],color="#ee1010",linestyle="--",linewidth=1.)
        plt.title("Net magnetisation (top) and energy (bottom) per site \nwith increasing temperature")
        plt.grid(which="major")
        plt.legend([Tc],["$T_c$ = 2.27"])
        plt.ylim(-0.35,1.2)
        plt.xticks(np.linspace(1.,5.,17),"")
        plt.yticks([0,0.5,1.0],["  0.0","  0.5","  1.0"])
        plt.ylabel("<M> per site")
        
        plt.subplot(2,1,2) 
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["\<E\> per site"],color="#000000")
        plt.plot(all_df_therm["therm_av_128x128"]["Temperature"],all_df_therm["therm_av_128x128"]["\<E\> per site"],"o",markersize=3,color="#000000")
        Tc,=plt.plot([2.27,2.27],[-2.2,0],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        yticks=([])
        plt.ylim(-2.2,-0.2)
        plt.xticks(np.linspace(1.,5.,17),[1.0,"",1.5,"",2.0,"",2.5,"",3.0,"",3.5,"",4.0,"",4.5,"",5.0])
        plt.ylabel("<E> per site")
        plt.xlabel("Temperature")
        
        plt.subplots_adjust(hspace=0)
        plt.savefig("./final_plots/variance_comp.png")
        

    
    if plot_choice == "6" or plot_choice == "5":
        # Plot of susceptibility vs temperature
        fig11 = plt.figure()
        plt.subplot(2,1,1)
        plt.title("Magnetic Susceptibility: Antiferromagnet (top) vs. ferromagnet (bottom)")
        plt.plot(all_df_therm["therm_av_antiferr"]["Temperature"],all_df_therm["therm_av_antiferr"]["Susceptibility"],color="#000000")
        plt.plot(all_df_therm["therm_av_antiferr"]["Temperature"],all_df_therm["therm_av_antiferr"]["Susceptibility"],"o",markersize=3,color="#000000")
        #plt.ylim(-0.0001,0.003)
        #Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Magnetic Susceptibility")
        #plt.yticks(np.linspace(0,0.003,6),"")
        #plt.legend([Tc],["$T \sim T_c$"])
        
    
        plt.subplot(2,1,2)
        plt.plot(all_df_therm["therm_av_64x64"]["Temperature"],all_df_therm["therm_av_64x64"]["Susceptibility"],color="#000000")
        plt.plot(all_df_therm["therm_av_64x64"]["Temperature"],all_df_therm["therm_av_64x64"]["Susceptibility"],"o",markersize=3,color="#000000")
        #plt.ylim(-0.0001,0.003)
        #Tc,=plt.plot([2.27,2.27],[-0.2,1.1],color="#ee1010",linestyle="--",linewidth=1.)
        plt.grid(which="major")
        plt.xlabel("Temperature")
        plt.ylabel("Magnetic Susceptibility")
        #plt.yticks(np.linspace(0,0.003,6),"")
        #plt.legend([Tc],["$T \sim T_c$"])
        #plt.savefig("./final_plots/suscept_comp.png")


plt.show()
